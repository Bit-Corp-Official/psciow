name: Unity Build Project

on:
  push:
    branches:    
      - 'releases/**'
      - 'main'

jobs:
  createRelease:
    name: Create Release
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      
    steps:
      - run: echo "TIME=$(date "+%Y.%m.%d-%H.%M.%S")" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TIME }}
          release_name: Release ${{ env.TIME }}
          draft: false
          prerelease: true
          
    
    
  buildForPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - psciow
        unityVersion:
          - 2021.2.8f1
        targetPlatform:
          #- StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          #- StandaloneWindows # Build a Windows standalone.
          #- StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          #- iOS # Build an iOS player.
          #- Android # Build an Android .apk standalone app.
          #- WebGL # WebGL.
          
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
          
      - uses: actions/cache@v2
        with:
          path: Library # ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }} # Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{ hashFiles(matrix.projectPath) }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}-
            Library-
            
#       - uses: game-ci/unity-test-runner@v2
#         id: testRunner
#         env:
#           UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
#         with:
#           # projectPath: ${{ matrix.projectPath }}
#           unityVersion: ${{ matrix.unityVersion }}
#           githubToken: ${{ secrets.GITHUB_TOKEN }}
          
#       - uses: actions/upload-artifact@v2
#         if: always()
#         with:
#           name: Test results (all modes)
#           path: ${{ steps.testRunner.outputs.artifactsPath }}
          
      - uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          buildName: ${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          allowDirtyBuild: true
          # projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          # customParameters: '-myParameter myValue -myBoolean -ThirdParameter andItsValue'
      
      - run: cd build && zip -9 -r ../build.zip * && cd ..
      
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          path: build
          
#       - uses: svenstaro/upload-release-action@v2
#         with:
#           repo_token: ${{ secrets.GITHUB_TOKEN }}
#           file: build/*
#           tag: ${{ github.ref }}-${{ env.TIME }}
#           overwrite: true
#           file_glob: true

#       - uses: octokit/request-action@v2.x
#         id: get_latest_release
#         with:
#           route: GET /repos/:repository/releases/latest
#           repository: ${{ github.repository }}
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            
#       - name: get upload url
#         id: get_upload_url
#         run: |
#           url=$(echo "$response" | jq -r '.upload_url')
#           echo "::set-output name=url::$url"
#         env: 
#           response:  ${{ steps.get_latest_release.outputs.data }}

#       - name: Upload a Release Asset
#         uses: actions/upload-release-asset@v1.0.2
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url:  ${{steps.get_upload_url.outputs.url}}
#           # The path to the asset you want to upload
#           asset_path: ./build.zip
#           # The name of the asset you want to upload
#           asset_name: ${{ matrix.projectPath }}-${{ matrix.targetPlatform }}.zip
#           # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
#           asset_content_type: application/zip
          
      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: ${{ jobs.buildForPlatforms.env.TIME }}
          artifacts: "build.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
